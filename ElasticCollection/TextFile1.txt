To solve an elastic collection of a given object called "product" in C# with reflection,
you can use the Activator.CreateInstance() method to create a new instance of the "Product" class, 
and then add it to a List<object> or an ArrayList.

Here is an example of how you could use reflection to create a dynamic collection of "Product" objects:

Copy code
using System;
using System.Collections;
using System.Reflection;

class Product
{
    public string Name { get; set; }
    public decimal Price { get; set; }
}

class Program
{
    static void Main()
    {
        // Get the Type of the Product class
        Type productType = typeof(Product);

        // Create a new ArrayList to store the products
        ArrayList products = new ArrayList();
  // Add some products to the list using reflection
        products.Add(Activator.CreateInstance(productType, "Product 1", 10.99m));
        products.Add(Activator.CreateInstance(productType, "Product 2", 5.99m));
        products.Add(Activator.CreateInstance(productType, "Product 3", 19.99m));

        // Iterate through the list and display the products
        foreach (object product in products)
        {
            PropertyInfo nameProperty = productType.GetProperty("Name");
            PropertyInfo priceProperty = productType.GetProperty("Price");

            Console.WriteLine($"{nameProperty.GetValue(product)} - {priceProperty.GetValue(product)}");
        }
    }
}
This code uses reflection to create new instances of the "Product" class, and add them to an ArrayList.
Then it iterates through the ArrayList and display the products, using Activator.CreateInstance() method
to create new instances of the "Product" class, and the Type.GetProperty() method to access the "Name" and
"Price" properties of each product.

It's worth noting that reflection is relatively slower than normal method calls, so it's recommended' 
to use it only when necessary, and avoid using it in performance-critical code.